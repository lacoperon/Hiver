// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var $$Array    = require("bs-platform/lib/js/array.js");
var Block      = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Supplement = require("./supplemental");

var creeps = (Object.keys(Game.creeps));

var spawns = (Object.keys(Game.spawns));

var spawnsObject = (Game.spawns);

function bodyPartToCost(part) {
  switch (part) {
    case 1 : 
        return 100;
    case 0 : 
    case 2 : 
        return 50;
    case 3 : 
        return 80;
    case 4 : 
        return 150;
    case 5 : 
        return 250;
    case 6 : 
        return 10;
    case 7 : 
        return 600;
    
  }
}

function bodyPartToString(part) {
  switch (part) {
    case 0 : 
        return "move";
    case 1 : 
        return "work";
    case 2 : 
        return "carry";
    case 3 : 
        return "attack";
    case 4 : 
        return "ranged_attack";
    case 5 : 
        return "heal";
    case 6 : 
        return "tough";
    case 7 : 
        return "claim";
    
  }
}

function spawnCreep(spawn, body) {
  Supplement.spawnCreepHelper(spawn, $$Array.map(bodyPartToString, body));
  console.log("Spawning a new creep!");
  return /* () */0;
}

function setMemoryField(creepName, memory) {
  if (memory.tag) {
    Supplement.defineMemoryHelper(creepName, "role", "harvester");
    return /* () */0;
  } else {
    Supplement.defineMemoryHelper(creepName, "working", memory[0] !== 0 ? "true" : "false");
    return /* () */0;
  }
}

function iterateCreeps() {
  var x = creeps.length;
  if (x !== 0) {
    console.log("There are " + (Pervasives.string_of_int(x) + " creeps currently"));
    for(var i = 0 ,i_finish = creeps.length - 1 | 0; i <= i_finish; ++i){
      var creepName = Caml_array.caml_array_get(creeps, i);
      console.log("One is named " + creepName);
      setMemoryField(creepName, /* Working */Block.__(0, [/* false */0]));
    }
    return /* () */0;
  } else {
    console.log("There are no creeps to iterate over");
    return /* () */0;
  }
}

function iterateSpawns() {
  var x = spawns.length;
  if (x !== 0) {
    console.log("There are " + (Pervasives.string_of_int(x) + " spawns currently"));
    for(var i = 0 ,i_finish = spawns.length - 1 | 0; i <= i_finish; ++i){
      console.log("One is named " + Caml_array.caml_array_get(spawns, i));
      var body = /* int array */[
        /* WORK */1,
        /* CARRY */2,
        /* MOVE */0,
        /* MOVE */0
      ];
      spawnCreep(Caml_array.caml_array_get(spawns, i), body);
    }
    return /* () */0;
  } else {
    console.log("There are no spawns to iterate over (should be untrue)");
    return /* () */0;
  }
}

function run() {
  var time = (Date.now());
  console.log(time);
  iterateSpawns(/* () */0);
  return iterateCreeps(/* () */0);
}

var runEachTick = run(/* () */0);

var creepsArray = creeps;

var spawnsArray = spawns;

exports.creeps           = creeps;
exports.creepsArray      = creepsArray;
exports.spawns           = spawns;
exports.spawnsArray      = spawnsArray;
exports.spawnsObject     = spawnsObject;
exports.bodyPartToCost   = bodyPartToCost;
exports.bodyPartToString = bodyPartToString;
exports.spawnCreep       = spawnCreep;
exports.setMemoryField   = setMemoryField;
exports.iterateCreeps    = iterateCreeps;
exports.iterateSpawns    = iterateSpawns;
exports.run              = run;
exports.runEachTick      = runEachTick;
/* creeps Not a pure module */
