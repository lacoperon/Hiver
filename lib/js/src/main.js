// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var Creep           = require("./creep.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Spawn           = require("./spawn.js");
var Caml_obj        = require("bs-platform/lib/js/caml_obj.js");
var Caml_array      = require("bs-platform/lib/js/caml_array.js");
var ConstantConv    = require("./constantConv.js");
var RoleUpgrader    = require("./roleUpgrader.js");
var RoleHarvester   = require("./roleHarvester.js");
var Supplement      = require("./supplemental");
var HelperFunctions = require("./helperFunctions.js");

var creeps = (Object.keys(Game.creeps));

var realCreeps = Curry._2(HelperFunctions.$$Array[/* map */12], (function (prim) {
        return Supplement.getCreep(prim);
      }), creeps);

var spawns = (Object.keys(Game.spawns));

function iterateCreeps() {
  var x = creeps.length;
  if (x !== 0) {
    for(var i = 0 ,i_finish = x - 1 | 0; i <= i_finish; ++i){
      var creepName = Caml_array.caml_array_get(creeps, i);
      var creep = Supplement.getCreep(creepName);
      var creepRole = Creep.getRole(creep);
      if (creepRole !== 0) {
        RoleUpgrader.runCreep(creep);
      } else {
        RoleHarvester.runCreep(creep);
      }
    }
    return /* () */0;
  } else {
    console.log("There are no creeps to iterate over");
    return /* () */0;
  }
}

function iterateSpawns() {
  for(var i = 0 ,i_finish = spawns.length - 1 | 0; i <= i_finish; ++i){
    var body = /* int array */[
      /* WORK */1,
      /* CARRY */2,
      /* MOVE */0,
      /* MOVE */0
    ];
    var spawnString = Caml_array.caml_array_get(spawns, i);
    var spawn = Supplement.getSpawn(spawnString);
    var room = spawn.room;
    var energyAvailable = room.energyAvailable;
    var bodyCost = HelperFunctions.arraySum(Curry._2(HelperFunctions.$$Array[/* map */12], ConstantConv.bodyPartToCost, body));
    var roleToOne = function (r, creep) {
      if (Caml_obj.caml_equal(Creep.getRole(creep), r)) {
        return 1;
      } else {
        return 0;
      }
    };
    if (bodyCost <= energyAvailable) {
      var harvesterIntArray = Curry._2(HelperFunctions.$$Array[/* map */12], (function (param) {
              return roleToOne(/* Harvester */0, param);
            }), realCreeps);
      var harvesterNum = HelperFunctions.arraySum(harvesterIntArray);
      var upgraderIntArray = Curry._2(HelperFunctions.$$Array[/* map */12], (function (param) {
              return roleToOne(/* Upgrader */1, param);
            }), realCreeps);
      var upgraderNum = HelperFunctions.arraySum(upgraderIntArray);
      if (harvesterNum > 4 && upgraderNum < 3) {
        Spawn.spawnCreepWithRole(spawnString, body, /* Upgrader */1);
        console.log("Spawning new upgrader creep");
      } else {
        Spawn.spawnCreepWithRole(spawnString, body, /* Harvester */0);
        console.log("Spawning new harvester creep");
      }
    }
    
  }
  return /* () */0;
}

function run() {
  iterateCreeps(/* () */0);
  iterateSpawns(/* () */0);
  Supplement.doWatcher("");
  Supplement.clearDeadCreepsFromMemory("");
  return /* () */0;
}

var runEachTick = run(/* () */0);

exports.creeps        = creeps;
exports.realCreeps    = realCreeps;
exports.spawns        = spawns;
exports.iterateCreeps = iterateCreeps;
exports.iterateSpawns = iterateSpawns;
exports.run           = run;
exports.runEachTick   = runEachTick;
/* creeps Not a pure module */
