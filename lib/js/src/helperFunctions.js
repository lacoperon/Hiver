// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var $$Array    = require("bs-platform/lib/js/array.js");
var BaseTypes  = require("./baseTypes.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Supplement = require("./supplemental");

function filter(cond, array) {
  var list = $$Array.to_list(array);
  return $$Array.of_list(List.filter(cond)(list));
}

var $$Array$1 = /* module */[
  /* init */$$Array.init,
  /* make_matrix */$$Array.make_matrix,
  /* create_matrix */$$Array.create_matrix,
  /* append */$$Array.append,
  /* concat */$$Array.concat,
  /* sub */$$Array.sub,
  /* copy */$$Array.copy,
  /* fill */$$Array.fill,
  /* blit */$$Array.blit,
  /* to_list */$$Array.to_list,
  /* of_list */$$Array.of_list,
  /* iter */$$Array.iter,
  /* map */$$Array.map,
  /* iteri */$$Array.iteri,
  /* mapi */$$Array.mapi,
  /* fold_left */$$Array.fold_left,
  /* fold_right */$$Array.fold_right,
  /* sort */$$Array.sort,
  /* stable_sort */$$Array.stable_sort,
  /* fast_sort */$$Array.fast_sort,
  /* filter */filter
];

function arraySumRecursive(numArray, _currentSum, _currentIndex) {
  while(true) {
    var currentIndex = _currentIndex;
    var currentSum = _currentSum;
    if (numArray.length === currentIndex) {
      return currentSum;
    } else {
      _currentIndex = currentIndex + 1 | 0;
      _currentSum = currentSum + Caml_array.caml_array_get(numArray, currentIndex) | 0;
      continue ;
      
    }
  };
}

function arraySum(numArray) {
  return arraySumRecursive(numArray, 0, 0);
}

function setMemoryField(creep, memory) {
  switch (memory.tag | 0) {
    case 0 : 
        Supplement.defineMemoryHelper(creep, "working", memory[0] !== 0 ? "true" : "false");
        return /* () */0;
    case 1 : 
        Supplement.defineMemoryHelper(creep, "role", BaseTypes.roleToString(memory[0]));
        return /* () */0;
    case 2 : 
        Supplement.defineMemoryHelper(creep, "mining", memory[0] !== 0 ? "true" : "false");
        return /* () */0;
    case 3 : 
        Supplement.defineMemoryHelper(creep, "building", memory[0] !== 0 ? "true" : "false");
        return /* () */0;
    case 4 : 
        Supplement.defineMemoryHelper(creep, "source", memory[0]);
        return /* () */0;
    case 5 : 
        Supplement.defineMemoryHelper(creep, "homeroom", memory[0]);
        return /* () */0;
    
  }
}

exports.$$Array           = $$Array$1;
exports.arraySumRecursive = arraySumRecursive;
exports.arraySum          = arraySum;
exports.setMemoryField    = setMemoryField;
/* ./supplemental Not a pure module */
