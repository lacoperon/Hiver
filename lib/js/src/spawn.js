// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var Curry           = require("bs-platform/lib/js/curry.js");
var Pervasives      = require("bs-platform/lib/js/pervasives.js");
var ConstantConv    = require("./constantConv.js");
var Supplement      = require("./supplemental");
var HelperFunctions = require("./helperFunctions.js");

function spawnCreepWithRole(spawn, body, r) {
  var $js;
  switch (r) {
    case 0 : 
        $js = "harvester";
        break;
    case 1 : 
        $js = "upgrader";
        break;
    case 2 : 
        $js = "builder";
        break;
    
  }
  return Supplement.spawnCreepWithMemoryHelper(spawn, Curry._2(HelperFunctions.$$Array[/* map */12], ConstantConv.bodyPartToString, body), /* array */[
              "role",
              $js
            ]);
}

function createLargestTandemBody(spawn, body) {
  var spawnEnergy = spawn.energyCapacityAvailable;
  var bodyCost = HelperFunctions.arraySum(Curry._2(HelperFunctions.$$Array[/* map */12], ConstantConv.bodyPartToCost, body));
  var _spawnEnergyRemaining = spawnEnergy;
  var bodyUnit = Curry._1(HelperFunctions.$$Array[/* to_list */9], body);
  var _currentBody = /* [] */0;
  while(true) {
    var currentBody = _currentBody;
    var spawnEnergyRemaining = _spawnEnergyRemaining;
    if (spawnEnergyRemaining < bodyCost) {
      return Curry._1(HelperFunctions.$$Array[/* of_list */10], currentBody);
    } else {
      _currentBody = Pervasives.$at(bodyUnit, currentBody);
      _spawnEnergyRemaining = spawnEnergyRemaining - bodyCost | 0;
      continue ;
      
    }
  };
}

exports.spawnCreepWithRole      = spawnCreepWithRole;
exports.createLargestTandemBody = createLargestTandemBody;
/* ./supplemental Not a pure module */
