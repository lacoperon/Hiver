// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var NumNotOfType = Caml_exceptions.create("ConstantConv.NumNotOfType");

var StringNotOfType = Caml_exceptions.create("ConstantConv.StringNotOfType");

function bodyPartToCost(part) {
  switch (part) {
    case 1 : 
        return 100;
    case 0 : 
    case 2 : 
        return 50;
    case 3 : 
        return 80;
    case 4 : 
        return 150;
    case 5 : 
        return 250;
    case 6 : 
        return 10;
    case 7 : 
        return 600;
    
  }
}

function bodyPartToString(part) {
  switch (part) {
    case 0 : 
        return "move";
    case 1 : 
        return "work";
    case 2 : 
        return "carry";
    case 3 : 
        return "attack";
    case 4 : 
        return "ranged_attack";
    case 5 : 
        return "heal";
    case 6 : 
        return "tough";
    case 7 : 
        return "claim";
    
  }
}

function toNumResult(sc) {
  switch (sc) {
    case 0 : 
        return 0;
    case 1 : 
        return -1;
    case 2 : 
        return -2;
    case 3 : 
        return -3;
    case 4 : 
        return -4;
    case 5 : 
        return -5;
    case 7 : 
        return -7;
    case 8 : 
        return -8;
    case 9 : 
        return -9;
    case 10 : 
        return -10;
    case 11 : 
        return -11;
    case 12 : 
        return -12;
    case 6 : 
    case 13 : 
        return -6;
    case 14 : 
        return -14;
    case 15 : 
        return -15;
    
  }
}

function fromNumResult(i) {
  var switcher = i + 15 | 0;
  if (switcher > 15 || switcher < 0) {
    throw [
          NumNotOfType,
          i
        ];
  } else {
    switch (switcher) {
      case 0 : 
          return /* ERR_GCL_NOT_ENOUGH */15;
      case 1 : 
          return /* ERR_RCL_NOT_ENOUGH */14;
      case 2 : 
          throw [
                NumNotOfType,
                i
              ];
      case 3 : 
          return /* ERR_NO_BODYPART */12;
      case 4 : 
          return /* ERR_TIRED */11;
      case 5 : 
          return /* ERR_INVALID_ARGS */10;
      case 6 : 
          return /* ERR_NOT_IN_RANGE */9;
      case 7 : 
          return /* ERR_FULL */8;
      case 8 : 
          return /* ERR_INVALID_TARGET */7;
      case 9 : 
          return /* ERR_NOT_ENOUGH_ENERGY */6;
      case 10 : 
          return /* ERR_NOT_FOUND */5;
      case 11 : 
          return /* ERR_BUSY */4;
      case 12 : 
          return /* ERR_NAME_EXISTS */3;
      case 13 : 
          return /* ERR_NO_PATH */2;
      case 14 : 
          return /* ERR_NOT_OWNER */1;
      case 15 : 
          return /* OK */0;
      
    }
  }
}

function toNumFilter(sc) {
  switch (sc) {
    case 0 : 
        return 1;
    case 1 : 
        return 3;
    case 2 : 
        return 5;
    case 3 : 
        return 7;
    case 4 : 
        return 10;
    case 5 : 
        return 101;
    case 6 : 
        return 102;
    case 7 : 
        return 103;
    case 8 : 
        return 104;
    case 9 : 
        return 105;
    case 10 : 
    case 11 : 
        return 106;
    case 12 : 
        return 107;
    case 13 : 
        return 108;
    case 14 : 
        return 109;
    case 15 : 
        return 110;
    case 16 : 
        return 111;
    case 17 : 
        return 112;
    case 18 : 
        return 113;
    case 19 : 
        return 114;
    case 20 : 
        return 115;
    case 21 : 
        return 116;
    
  }
}

function fromNumFilter(i) {
  if (i >= 11) {
    var switcher = i - 101 | 0;
    if (switcher > 15 || switcher < 0) {
      throw [
            NumNotOfType,
            i
          ];
    } else {
      switch (switcher) {
        case 0 : 
            return /* FIND_CREEPS */5;
        case 1 : 
            return /* FIND_MY_CREEPS */6;
        case 2 : 
            return /* FIND_HOSTILE_CREEPS */7;
        case 3 : 
            return /* FIND_SOURCES_ACTIVE */8;
        case 4 : 
            return /* FIND_SOURCES */9;
        case 5 : 
            return /* FIND_DROPPED_ENERGY */10;
        case 6 : 
            return /* FIND_STRUCTURES */12;
        case 7 : 
            return /* FIND_MY_STRUCTURES */13;
        case 8 : 
            return /* FIND_HOSTILE_STRUCTURES */14;
        case 9 : 
            return /* FIND_FLAGS */15;
        case 10 : 
            return /* FIND_CONSTRUCTION_SITES */16;
        case 11 : 
            return /* FIND_MY_SPAWNS */17;
        case 12 : 
            return /* FIND_HOSTILE_SPAWNS */18;
        case 13 : 
            return /* FIND_MY_CONSTRUCTION_SITES */19;
        case 14 : 
            return /* FIND_HOSTILE_CONSTRUCTION_SITES */20;
        case 15 : 
            return /* FIND_MINERALS */21;
        
      }
    }
  } else if (i > 0) {
    switch (i - 1 | 0) {
      case 0 : 
          return /* FIND_EXIT_TOP */0;
      case 2 : 
          return /* FIND_EXIT_RIGHT */1;
      case 4 : 
          return /* FIND_EXIT_BOTTOM */2;
      case 6 : 
          return /* FIND_EXIT_LEFT */3;
      case 1 : 
      case 3 : 
      case 5 : 
      case 7 : 
      case 8 : 
          throw [
                NumNotOfType,
                i
              ];
      case 9 : 
          return /* FIND_EXIT */4;
      
    }
  } else {
    throw [
          NumNotOfType,
          i
        ];
  }
}

function toStringStructure(sc) {
  switch (sc) {
    case 0 : 
        return "spawn";
    case 1 : 
        return "extension";
    case 2 : 
        return "road";
    case 3 : 
        return "constructedWall";
    case 4 : 
        return "rampart";
    case 5 : 
        return "keeperLair";
    case 6 : 
        return "portal";
    case 7 : 
        return "controller";
    case 8 : 
        return "link";
    case 9 : 
        return "storage";
    case 10 : 
        return "tower";
    case 11 : 
        return "observer";
    case 12 : 
        return "powerBank";
    case 13 : 
        return "powerSpawn";
    case 14 : 
        return "extractor";
    case 15 : 
        return "lab";
    case 16 : 
        return "terminal";
    case 17 : 
        return "container";
    
  }
}

function fromStringStructure(sc) {
  switch (sc) {
    case "constructedWall" : 
        return /* STRUCTURE_WALL */3;
    case "container" : 
        return /* STRUCTURE_CONTAINER */17;
    case "controller" : 
        return /* STRUCTURE_CONTROLLER */7;
    case "extension" : 
        return /* STRUCTURE_EXTENSION */1;
    case "extractor" : 
        return /* STRUCTURE_EXTRACTOR */14;
    case "keeperLair" : 
        return /* STRUCTURE_KEEPER_LAIR */5;
    case "lab" : 
        return /* STRUCTURE_LAB */15;
    case "link" : 
        return /* STRUCTURE_LINK */8;
    case "observer" : 
        return /* STRUCTURE_OBSERVER */11;
    case "portal" : 
        return /* STRUCTURE_PORTAL */6;
    case "powerBank" : 
        return /* STRUCTURE_POWER_BANK */12;
    case "powerSpawn" : 
        return /* STRUCTURE_POWER_SPAWN */13;
    case "rampart" : 
        return /* STRUCTURE_RAMPART */4;
    case "road" : 
        return /* STRUCTURE_ROAD */2;
    case "spawn" : 
        return /* STRUCTURE_SPAWN */0;
    case "storage" : 
        return /* STRUCTURE_STORAGE */9;
    case "terminal" : 
        return /* STRUCTURE_TERMINAL */16;
    case "tower" : 
        return /* STRUCTURE_TOWER */10;
    default:
      throw [
            StringNotOfType,
            sc
          ];
  }
}

exports.NumNotOfType        = NumNotOfType;
exports.StringNotOfType     = StringNotOfType;
exports.bodyPartToCost      = bodyPartToCost;
exports.bodyPartToString    = bodyPartToString;
exports.toNumResult         = toNumResult;
exports.fromNumResult       = fromNumResult;
exports.toNumFilter         = toNumFilter;
exports.fromNumFilter       = fromNumFilter;
exports.toStringStructure   = toStringStructure;
exports.fromStringStructure = fromStringStructure;
/* No side effect */
