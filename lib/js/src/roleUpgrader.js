// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var Caml_array      = require("bs-platform/lib/js/caml_array.js");
var RoomObject      = require("./roomObject.js");
var ConstantConv    = require("./constantConv.js");
var HelperFunctions = require("./helperFunctions.js");

function runCreep(creep) {
  var carryCap = creep.carryCapacity;
  var load = creep.carry.energy;
  var currentRoom = creep.room;
  if (load) {
    var energySources = RoomObject.find(currentRoom, /* FIND_SOURCES_ACTIVE */8);
    var chosenSource = Caml_array.caml_array_get(energySources, 1);
    if (load < carryCap && +creep.mining === /* true */1) {
      if (creep.harvest(chosenSource) === ConstantConv.toNumResult(/* ERR_NOT_IN_RANGE */9)) {
        creep.moveTo(chosenSource);
        return /* () */0;
      } else {
        return 0;
      }
    } else {
      HelperFunctions.setMemoryField(creep, /* Should_Mine */Block.__(2, [/* false */0]));
      var structureArray = RoomObject.find(currentRoom, /* FIND_MY_STRUCTURES */13);
      var isSpawnOrExtension = function (ro) {
        var match = RoomObject.get_struct_type(ro);
        if (match !== 7) {
          return /* false */0;
        } else {
          return /* true */1;
        }
      };
      var spawnsAndExtensions = Curry._2(HelperFunctions.$$Array[/* filter */20], isSpawnOrExtension, structureArray);
      var chosenStructure = Caml_array.caml_array_get(spawnsAndExtensions, 0);
      creep.transfer(chosenStructure, "energy");
      creep.moveTo(chosenStructure);
      return /* () */0;
    }
  } else {
    HelperFunctions.setMemoryField(creep, /* Should_Mine */Block.__(2, [/* true */1]));
    var energySources$1 = RoomObject.find(currentRoom, /* FIND_SOURCES_ACTIVE */8);
    var chosenSource$1 = Caml_array.caml_array_get(energySources$1, 1);
    if (creep.harvest(chosenSource$1) === ConstantConv.toNumResult(/* ERR_NOT_IN_RANGE */9)) {
      creep.moveTo(chosenSource$1);
      return /* () */0;
    } else {
      return 0;
    }
  }
}

exports.runCreep = runCreep;
/* HelperFunctions Not a pure module */
