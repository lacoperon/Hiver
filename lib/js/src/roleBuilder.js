// Generated by BUCKLESCRIPT VERSION 1.8.1, PLEASE EDIT WITH CARE
'use strict';

var Block           = require("bs-platform/lib/js/block.js");
var RoomObject      = require("./roomObject.js");
var ConstantConv    = require("./constantConv.js");
var RoleHarvester   = require("./roleHarvester.js");
var Supplemental    = require("./supplemental");
var HelperFunctions = require("./helperFunctions.js");

function runCreep(creep) {
  var carryCap = creep.carryCapacity;
  var load = creep.carry.energy;
  var currentRoom = creep.room;
  var shouldMine = +Supplemental.getIfShouldMine(creep);
  if (!load) {
    HelperFunctions.setMemoryField(creep, /* Should_Mine */Block.__(2, [/* true */1]));
  }
  if (load === carryCap) {
    HelperFunctions.setMemoryField(creep, /* Should_Mine */Block.__(2, [/* false */0]));
  }
  if (shouldMine && load !== carryCap) {
    var energySources = RoomObject.find(currentRoom, /* FIND_SOURCES_ACTIVE */8);
    var chosenSource = creep.pos.findClosestByPath(energySources);
    if (shouldMine && creep.harvest(chosenSource) === ConstantConv.toNumResult(/* ERR_NOT_IN_RANGE */9)) {
      creep.say("B_HARV");
      creep.moveTo(chosenSource);
      return /* () */0;
    } else {
      return 0;
    }
  } else {
    var constructSites = RoomObject.find(currentRoom, /* FIND_MY_CONSTRUCTION_SITES */19);
    if (constructSites.length !== 0) {
      var chosenSite = creep.pos.findClosestByPath(constructSites);
      creep.say("B_BUIL");
      if (creep.build(chosenSite) === ConstantConv.toNumResult(/* ERR_NOT_IN_RANGE */9)) {
        creep.moveTo(chosenSite);
        return /* () */0;
      } else {
        return 0;
      }
    } else {
      creep.say("B_NOPE");
      return RoleHarvester.runCreep(creep);
    }
  }
}

exports.runCreep = runCreep;
/* RoleHarvester Not a pure module */
